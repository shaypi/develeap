pipeline {
    agent {
        docker { image 'custom-jenkins-docker:latest'}
    }
    environment {
        AWS_REGION = 'eu-west-1'
        AWS_ACCESS_KEY_ID = credentials('aws-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    options {
            disableConcurrentBuilds()
            skipDefaultCheckout()
            timestamps()
    }

    parameters {
        choice(
            choices: ['apply', 'destroy'],
            description: 'Apply or Destroy',
            name: 'CONDITION',
        )
    }

    // triggers {
    //     GenericTrigger(
    //             genericVariables: [
    //                     [key: 'Commit_id', value: '$.pull_request.head.sha', defaultValue: 'None'],
    //                     [key: 'PR_number', value: '$.number', defaultValue: 'None'],
    //                     [key: 'Repository', value: '$.pull_request.base.repo.full_name', defaultValue: 'None'],
    //                     [key: 'User', value: '$.pull_request.user.login', defaultValue: 'None'],
    //                     [key: 'action', value: '$.action', defaultValue: 'None'],
    //             ],

    //             causeString: 'Triggered on $PR_number',
    //             token: 'develeap',
    //             printContributedVariables: true,
    //             printPostContent: true,
    //             silentResponse: false,
    //             regexpFilterText: '$action',
    //             regexpFilterExpression: '(opened|reopened|synchronize)'
    //     )
    // }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/shaypi/develeap']]])
            }
        }

        stage('Install third-party dependencies') {
            steps {
                sh 'apt-get update && apt-get install -y zip curl'
            }
        }

        stage('Install AWS CLI') {
            steps {
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh 'unzip -o awscliv2.zip'
                sh './aws/install'
                sh 'apt-get update'
                sh 'apt-get dist-upgrade -y'
                sh 'apt-get install -y less'
            }
        }

        stage('Install Terraform') {
            steps {
                sh 'DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install software-properties-common'
                sh 'apt-get update && apt-get install -y gnupg wget'
                sh 'wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg'
                sh 'gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint'
                sh 'echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list'
                sh 'apt update'
                sh 'apt-get -y install terraform'
                sh 'terraform --version'
            }
        }

        stage('Configure AWS credentials') {
            steps {
                sh 'mkdir ~/.aws'
                sh 'echo "[default]" > ~/.aws/credentials'
                sh 'echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials'
                sh 'echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials'
                sh 'echo "[default]" > ~/.aws/config'
                sh 'echo "region=${AWS_REGION}" >> ~/.aws/config'
            }
        }

        stage('Configure backend') {
            steps {
                dir('terraform/environments/test/ecr') {
                    sh '''
                        cat <<EOF > ecr-backend.conf
                        encrypt = true
                        bucket = "develeap-global-state"
                        key = "env/ecr/terraform.tfstate"
                        region = "${AWS_REGION}"
                        access_key = "${AWS_ACCESS_KEY_ID}"
                        secret_key = "${AWS_SECRET_ACCESS_KEY}"
                    '''
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                dir('terraform/environments/test/ecr') {
                    sh 'terraform init -backend-config=ecr-backend.conf'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform/environments/test/ecr') {
                    sh '''
                        terraform validate
                        terraform fmt
                        terraform init -backend-config=ecr-backend.conf
                        terraform plan -var-file="main.tfvars"
                    '''
                }
            }
            post {
                always {
                    echo 'Terraform plan complete!'
                }
            }
        }

        stage('Terraform Apply/Destroy') {
            steps {
                dir('terraform/environments/test/ecr') {
                    sh '''
                        terraform validate
                        terraform fmt
                        terraform init -backend-config=ecr-backend.conf
                        terraform apply -var-file="main.tfvars" -auto-approve
                    '''
                }
            }
            post {
                always {
                    echo 'Terraform apply/destroy complete!'
                }
            }
        }
    }
}
